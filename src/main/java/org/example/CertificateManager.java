package org.example;

import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.swing.*;
import java.io.File;
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

/**
 * üîí Certificate Manager - SSL Certificate Handling
 * 
 * Qu·∫£n l√Ω SSL certificates cho FTPS connections v·ªõi 2 modes:
 * 
 * 1. CUSTOM CERTIFICATE MODE:
 *    ‚Ä¢ Load certificate t·ª´ file (.pem, .crt, .cer)
 *    ‚Ä¢ Validate server identity against provided cert
 *    ‚Ä¢ Enhanced security - ch·ªâ trust specific server
 *    ‚Ä¢ Protect against man-in-the-middle attacks
 * 
 * 2. ACCEPT-ALL MODE (Demo only):
 *    ‚Ä¢ Accept b·∫•t k·ª≥ certificate n√†o
 *    ‚Ä¢ D√πng khi kh√¥ng c√≥ custom certificate
 *    ‚Ä¢ V·∫´n c√≥ TLS encryption nh∆∞ng kh√¥ng validate server identity
 *    ‚Ä¢ CHI D√ôNG CHO DEMO - KH√îNG AN TO√ÄN CHO PRODUCTION
 * 
 * CERTIFICATE VALIDATION PROCESS:
 * 1. Load certificate file v√†o X509Certificate object
 * 2. T·∫°o KeyStore v√† add certificate v√†o trusted store
 * 3. Implement custom X509TrustManager
 * 4. Trong checkServerTrusted(): so s√°nh server cert v·ªõi loaded cert
 * 5. N·∫øu match -> trust, n·∫øu kh√¥ng -> reject connection
 * 
 * DEMO SCENARIOS:
 * ‚Ä¢ No certificate: Shows "(Default Trust)" - accepts any cert
 * ‚Ä¢ With certificate: Shows "(Custom Certificate)" - validates server
 * 
 * @author Demo Application
 * @version 1.0
 * @see FTPSFileManager Main application using this certificate manager
 */
public class CertificateManager {
    
    /**
     * T·∫°o TrustManager cho FTPS connection v·ªõi certificate validation
     * 
     * LOGIC:
     * - N·∫øu c√≥ certificatePath: Load v√† validate against specific cert
     * - N·∫øu kh√¥ng c√≥ certificatePath: Accept-all mode (demo only)
     * 
     * CERTIFICATE FORMATS H·ªñ TR·ª¢:
     * ‚Ä¢ .pem: Privacy-Enhanced Mail format
     * ‚Ä¢ .crt: Certificate file
     * ‚Ä¢ .cer: Certificate file (alternative extension)
     * 
     * @param certificatePath ƒê∆∞·ªùng d·∫´n ƒë·∫øn certificate file (c√≥ th·ªÉ null/empty)
     * @return TrustManager array cho FTPSClient
     */
    public static TrustManager[] createTrustManager(String certificatePath) {
        if (certificatePath == null || certificatePath.isEmpty()) {
            return createAcceptAllTrustManager();
        }
        
        try {
            File certFile = new File(certificatePath);
            if (!certFile.exists()) {
                JOptionPane.showMessageDialog(null, 
                    "Certificate file not found: " + certificatePath);
                return createAcceptAllTrustManager();
            }
            
            CertificateFactory cf = CertificateFactory.getInstance("X.509");
            X509Certificate cert;
            
            try (FileInputStream fis = new FileInputStream(certFile)) {
                cert = (X509Certificate) cf.generateCertificate(fis);
            }
            
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            keyStore.load(null, null);
            keyStore.setCertificateEntry("server", cert);
            
            return new TrustManager[] {
                new X509TrustManager() {
                    @Override
                    public void checkClientTrusted(X509Certificate[] chain, String authType) {}
                    
                    @Override
                    public void checkServerTrusted(X509Certificate[] chain, String authType) {
                        // Verify against loaded certificate
                        for (X509Certificate c : chain) {
                            if (c.equals(cert)) {
                                return;
                            }
                        }
                        throw new RuntimeException("Server certificate not trusted");
                    }
                    
                    @Override
                    public X509Certificate[] getAcceptedIssuers() {
                        return new X509Certificate[] { cert };
                    }
                }
            };
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, 
                "Error loading certificate: " + e.getMessage());
            return createAcceptAllTrustManager();
        }
    }
    
    /**
     * T·∫°o Accept-All TrustManager (CHI D√ôNG CHO DEMO)
     * 
     * ‚ö†Ô∏è B·∫¢O M·∫¨T WARNING:
     * TrustManager n√†y accept b·∫•t k·ª≥ certificate n√†o m√† kh√¥ng validation.
     * V·∫´n c√≥ TLS encryption nh∆∞ng kh√¥ng protect kh·ªèi man-in-the-middle attacks.
     * 
     * S·ª≠ d·ª•ng khi:
     * ‚Ä¢ Demo v·ªõi self-signed certificates
     * ‚Ä¢ Test environment kh√¥ng c√≥ proper CA
     * ‚Ä¢ Kh√¥ng c√≥ certificate file ƒë·ªÉ validate
     * 
     * KH√îNG BAO GI·ªû s·ª≠ d·ª•ng trong production!
     * 
     * @return TrustManager array ch·∫•p nh·∫≠n m·ªçi certificate
     */
    private static TrustManager[] createAcceptAllTrustManager() {
        return new TrustManager[] {
            new X509TrustManager() {
                @Override
                public void checkClientTrusted(X509Certificate[] chain, String authType) {}
                
                @Override
                public void checkServerTrusted(X509Certificate[] chain, String authType) {}
                
                @Override
                public X509Certificate[] getAcceptedIssuers() {
                    return new X509Certificate[0];
                }
            }
        };
    }
}